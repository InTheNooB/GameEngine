package engine.ihm.net.client;

import engine.GameContainer;
import engine.ihm.net.ConsoleHistorique;
import engine.net.client.NetworkScanner;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.basic.BasicLookAndFeel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class ClientConsole extends javax.swing.JFrame {

    private final GameContainer gc;
    private StyledDocument doc;
    private final ConsoleHistorique historique;

    /**
     * Creates new form Console
     * @param gc
     */
    public ClientConsole(GameContainer gc) {
        this.gc = gc;
        setupTheme();
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                gc.getClient().disconnect();
                gc.getClient().getGc().endProgram();
            }
        });
        historique = new ConsoleHistorique();
        historique.executeCommand("/connect localhost");
        initComponents();
        setVisible(true);
    }

    /**
     * Sets the Darcula theme
     */
    private void setupTheme() {
//        try {
//            BasicLookAndFeel darcula = new DarculaLaf();
//            UIManager.setLookAndFeel(darcula);
//        } catch (UnsupportedLookAndFeelException ex) {
//            Logger.getLogger(ClientConsole.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        btnCoDisco = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txpConsole = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        txfExecutable = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        btnScanServers = new javax.swing.JButton();
        cbbListServers = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(1, 1, 1));
        setResizable(false);

        btnCoDisco.setText("Connect");
        btnCoDisco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCoDiscoActionPerformed(evt);
            }
        });

        txpConsole.setEditable(false);
        txpConsole.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(txpConsole);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Client Console");

        txfExecutable.setBackground(new java.awt.Color(10, 10, 10));
        txfExecutable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfExecutableActionPerformed(evt);
            }
        });
        txfExecutable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfExecutableKeyPressed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnScanServers.setText("Scan Servers");
        btnScanServers.setMinimumSize(new java.awt.Dimension(77, 32));
        btnScanServers.setPreferredSize(new java.awt.Dimension(77, 32));
        btnScanServers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScanServersActionPerformed(evt);
            }
        });

        cbbListServers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbListServersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnScanServers, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbbListServers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 265, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addGap(79, 79, 79)
                .addComponent(btnCoDisco, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(txfExecutable)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbListServers, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnScanServers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCoDisco))
                .addContainerGap(563, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap(143, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txfExecutable)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Connect / disconnect from the server
     *
     * @param evt
     */
    private void btnCoDiscoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCoDiscoActionPerformed
        String ip = null;
        if (cbbListServers.getModel().getSelectedItem() != null && !cbbListServers.getModel().getSelectedItem().equals("No Server Found")) {
            ip = cbbListServers.getModel().getSelectedItem().toString().split(">")[1].trim();
        }
        gc.getClient().switchConnectionState(ip);

    }//GEN-LAST:event_btnCoDiscoActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        execute();
    }//GEN-LAST:event_btnSendActionPerformed

    private void execute() {
        gc.getClient().execute(txfExecutable.getText());
        historique.executeCommand(txfExecutable.getText());
        txfExecutable.setText("");
    }

    private void txfExecutableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfExecutableActionPerformed
        execute();
    }//GEN-LAST:event_txfExecutableActionPerformed

    private void txfExecutableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfExecutableKeyPressed
        String command = null;
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                command = historique.getUpCommand();
                break;
            case KeyEvent.VK_DOWN:
                command = historique.getDownCommand();
                break;
        }
        if (command != null) {
            txfExecutable.setText(command);
        }
    }//GEN-LAST:event_txfExecutableKeyPressed

    private void btnScanServersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanServersActionPerformed
        ArrayList<String> ips = NetworkScanner.broadcastUDPLookupServer(gc);
        DefaultComboBoxModel model = new DefaultComboBoxModel(ips.toArray());
        cbbListServers.setModel(model);
    }//GEN-LAST:event_btnScanServersActionPerformed

    private void cbbListServersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbListServersActionPerformed

    }//GEN-LAST:event_cbbListServersActionPerformed

    /**
     * Switch the title and the connect/disconnect button depeding on the
     * current state of the connection
     */
    public void switchCoDiscoButton() {
        btnCoDisco.setText(btnCoDisco.getText().equals("Connect") ? "Disconnect" : "Connect");
        this.setTitle(this.getTitle().equals("Connected") ? "Disconnected" : "Connected");
    }

    /**
     * Appends text in the console, handles colors : If begins with '#', then
     * the following char defines the color. Exemple : #rHey ! Will be written
     * red -r Red -g Green -b Blue -y Yellow -o Orange -- White -w White
     *
     * @param txt The text to write
     */
    public synchronized void writeConsole(String txt) {
        try {
            doc = txpConsole.getStyledDocument();
            Style style = txpConsole.addStyle("I'm a Style", null);
            String[] words = txt.split(" ");
            Color lastColor = Color.white;
            for (String w : words) {
                if (w.startsWith("#")) {
                    //color handling
                    switch (w.charAt(1)) {
                        case 'r':
                            StyleConstants.setForeground(style, Color.red);
                            lastColor = Color.red;
                            break;
                        case 'g':
                            StyleConstants.setForeground(style, Color.green);
                            lastColor = Color.green;
                            break;
                        case 'b':
                            StyleConstants.setForeground(style, Color.blue);
                            lastColor = Color.blue;
                            break;
                        case 'y':
                            StyleConstants.setForeground(style, Color.yellow);
                            lastColor = Color.yellow;
                            break;
                        case 'c':
                            StyleConstants.setForeground(style, Color.cyan);
                            lastColor = Color.cyan;
                            break;
                        case 'o':
                            StyleConstants.setForeground(style, Color.orange);
                            lastColor = Color.orange;
                            break;
                        case 'm':
                            StyleConstants.setForeground(style, Color.magenta);
                            lastColor = Color.magenta;
                            break;
                        case 'p':
                            StyleConstants.setForeground(style, Color.pink);
                            lastColor = Color.pink;
                            break;
                        default:
                        case 'w':
                        case '-':
                            StyleConstants.setForeground(style, Color.white);
                            lastColor = Color.white;
                            break;
                    }
                    doc.insertString(doc.getLength(), w.substring(2), style);
                } else {
                    StyleConstants.setForeground(style, lastColor);
                    doc.insertString(doc.getLength(), w, style);
                }
                doc.insertString(doc.getLength(), " ", style);

            }
            doc.insertString(doc.getLength(), "\n", style);
        } catch (BadLocationException ex) {
            Logger.getLogger(ClientConsole.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCoDisco;
    private javax.swing.JButton btnScanServers;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> cbbListServers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField txfExecutable;
    private javax.swing.JTextPane txpConsole;
    // End of variables declaration//GEN-END:variables

}
